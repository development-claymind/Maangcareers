# Generated by Django 5.0 on 2024-01-25 08:35

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courseManagement', '0001_initial'),
        ('userManagement', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompilerQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disable', models.BooleanField(default=False)),
                ('practice_mock', models.BooleanField(default=False, help_text="False is 'Practice Question'; True is 'Mock Test Question'")),
                ('week', models.CharField(choices=[('1', 'Week 1'), ('2', 'Week 2'), ('3', 'Week 3'), ('4', 'Week 4'), ('5', 'Week 5'), ('6', 'Week 6'), ('7', 'Week 7'), ('8', 'Week 8')], max_length=1)),
                ('day', models.CharField(choices=[('1', 'Day 1'), ('2', 'Day 2'), ('3', 'Day 3')], max_length=1)),
                ('prob_id', models.CharField(blank=True, help_text='Question Id from sphere-engine', max_length=255, null=True)),
                ('question_number', models.CharField(max_length=2)),
                ('ques_title', models.CharField(max_length=255, verbose_name='Question Title')),
                ('google', models.BooleanField(default=True)),
                ('amazon', models.BooleanField(default=True)),
                ('microsoft', models.BooleanField(default=True)),
                ('meta', models.BooleanField(default=True)),
                ('linkedin', models.BooleanField(default=True)),
                ('uber', models.BooleanField(default=True)),
                ('adobe', models.BooleanField(default=True)),
                ('cred', models.BooleanField(default=True)),
                ('prob_text', models.TextField()),
                ('prob_pic', models.ImageField(blank=True, null=True, upload_to='quesion_pictures')),
                ('examples', models.TextField(blank=True, help_text='After each eg press enter twice to create new example', null=True)),
                ('check_exm_pic1', models.BooleanField(default=False)),
                ('example1_picture', models.ImageField(blank=True, null=True, upload_to='example1_pictures/')),
                ('check_exm_pic2', models.BooleanField(default=False)),
                ('example2_picture', models.ImageField(blank=True, null=True, upload_to='example2_pictures/')),
                ('check_exm_pic3', models.BooleanField(default=False)),
                ('example3_picture', models.ImageField(blank=True, null=True, upload_to='example3_pictures/')),
                ('constraints', models.TextField(blank=True, help_text='After each eg press enter twice to create new constraint', null=True)),
                ('const_pic', models.ImageField(blank=True, null=True, upload_to='constraints_pictures')),
                ('challenge', models.TextField(blank=True, null=True)),
                ('video_solutions', models.TextField(blank=True, help_text='After each eg press enter twice to create new video link', null=True)),
                ('test_cases', models.JSONField(blank=True, default=dict, null=True)),
                ('approach1_block', models.BooleanField(default=False)),
                ('approach1_title', models.CharField(blank=True, max_length=255, null=True)),
                ('approach1_intuition', models.TextField(blank=True, null=True)),
                ('approach1_algo', models.TextField(blank=True, null=True)),
                ('approach1_picture_implementation', models.BooleanField(default=False, verbose_name='Approach1 Picture Implementation')),
                ('check_pic1', models.BooleanField(default=False, verbose_name='check Pic 1')),
                ('approach1_pic1', models.ImageField(blank=True, null=True, upload_to='approach1_pictures', verbose_name='Pic 1')),
                ('check_pic2', models.BooleanField(default=False, verbose_name='check Pic 2')),
                ('approach1_pic2', models.ImageField(blank=True, null=True, upload_to='approach1_pictures', verbose_name='Pic 2')),
                ('check_pic3', models.BooleanField(default=False, verbose_name='check Pic 3')),
                ('approach1_pic3', models.ImageField(blank=True, null=True, upload_to='approach1_pictures', verbose_name='Pic 3')),
                ('check_pic4', models.BooleanField(default=False, verbose_name='check Pic 4')),
                ('approach1_pic4', models.ImageField(blank=True, null=True, upload_to='approach1_pictures', verbose_name='Pic 4')),
                ('check_pic5', models.BooleanField(default=False, verbose_name='check Pic 5')),
                ('approach1_pic5', models.ImageField(blank=True, null=True, upload_to='approach1_pictures', verbose_name='Pic 5')),
                ('approach1_code_implementation', models.BooleanField(default=False, verbose_name='Approach1 Code Implementation')),
                ('approach1_cpp_code', models.TextField(blank=True, null=True, verbose_name='C++ Code')),
                ('approach1_java_code', models.TextField(blank=True, null=True, verbose_name='Java Code')),
                ('approach1_python_code', models.TextField(blank=True, null=True, verbose_name='Python Code')),
                ('approach1_complexity_analysis', models.TextField(blank=True, null=True)),
                ('approach2_block', models.BooleanField(default=False)),
                ('approach2_title', models.CharField(blank=True, max_length=255, null=True)),
                ('approach2_intuition', models.TextField(blank=True, null=True)),
                ('approach2_algo', models.TextField(blank=True, null=True)),
                ('approach2_picture_implementation', models.BooleanField(default=False, verbose_name='Approach2 Picture Implementation')),
                ('check_pic1_approach2', models.BooleanField(default=False, verbose_name='Check Pic 1 ')),
                ('approach2_pic1', models.ImageField(blank=True, null=True, upload_to='approach2_pictures', verbose_name='Pic 1 ')),
                ('check_pic2_approach2', models.BooleanField(default=False, verbose_name='Check Pic 2 ')),
                ('approach2_pic2', models.ImageField(blank=True, null=True, upload_to='approach2_pictures', verbose_name='Pic 2 ')),
                ('check_pic3_approach2', models.BooleanField(default=False, verbose_name='Check Pic 3 ')),
                ('approach2_pic3', models.ImageField(blank=True, null=True, upload_to='approach2_pictures', verbose_name='Pic 3 ')),
                ('check_pic4_approach2', models.BooleanField(default=False, verbose_name='Check Pic 4 ')),
                ('approach2_pic4', models.ImageField(blank=True, null=True, upload_to='approach2_pictures', verbose_name='Pic 4 ')),
                ('check_pic5_approach2', models.BooleanField(default=False, verbose_name='Check Pic 5 ')),
                ('approach2_pic5', models.ImageField(blank=True, null=True, upload_to='approach2_pictures', verbose_name='Pic 5 ')),
                ('approach2_code_implementation', models.BooleanField(default=False, verbose_name='Approach2 Code Implementation')),
                ('approach2_cpp_code', models.TextField(blank=True, null=True, verbose_name='C++ Code ')),
                ('approach2_java_code', models.TextField(blank=True, null=True, verbose_name='Java Code ')),
                ('approach2_python_code', models.TextField(blank=True, null=True, verbose_name='Python Code ')),
                ('approach2_complexity_analysis', models.TextField(blank=True, null=True)),
                ('approach3_block', models.BooleanField(default=False)),
                ('approach3_title', models.CharField(blank=True, max_length=255, null=True)),
                ('approach3_intuition', models.TextField(blank=True, null=True)),
                ('approach3_algo', models.TextField(blank=True, null=True)),
                ('approach3_picture_implementation', models.BooleanField(default=False, verbose_name='Approach3 Picture Implementation')),
                ('check_pic1_approach3', models.BooleanField(default=False, verbose_name='Check Pic 1')),
                ('approach3_pic1', models.ImageField(blank=True, null=True, upload_to='approach3_pictures', verbose_name='Pic 1 ')),
                ('check_pic2_approach3', models.BooleanField(default=False, verbose_name='Check Pic 2 ')),
                ('approach3_pic2', models.ImageField(blank=True, null=True, upload_to='approach3_pictures', verbose_name='Pic 2 ')),
                ('check_pic3_approach3', models.BooleanField(default=False, verbose_name='Check Pic 3 ')),
                ('approach3_pic3', models.ImageField(blank=True, null=True, upload_to='approach3_pictures', verbose_name='Pic 3 ')),
                ('check_pic4_approach3', models.BooleanField(default=False, verbose_name='Check Pic 4 ')),
                ('approach3_pic4', models.ImageField(blank=True, null=True, upload_to='approach3_pictures', verbose_name='Pic 4 ')),
                ('check_pic5_approach3', models.BooleanField(default=False, verbose_name='Check Pic 5 ')),
                ('approach3_pic5', models.ImageField(blank=True, null=True, upload_to='approach3_pictures', verbose_name='Pic 5 ')),
                ('approach3_code_implementation', models.BooleanField(default=False, verbose_name='Approach3 Code Implementation')),
                ('approach3_cpp_code', models.TextField(blank=True, null=True, verbose_name='C++ Code ')),
                ('approach3_java_code', models.TextField(blank=True, null=True, verbose_name='Java Code ')),
                ('approach3_python_code', models.TextField(blank=True, null=True, verbose_name='Python Code ')),
                ('approach3_complexity_analysis', models.TextField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courseManagement.course')),
            ],
        ),
        migrations.CreateModel(
            name='CompilerQuestionAtempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=False)),
                ('submited', models.BooleanField(default=False)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('attepmt_number', models.PositiveBigIntegerField(blank=True, default=0, null=True)),
                ('coding_language', models.CharField(blank=True, help_text='Language', max_length=255, null=True)),
                ('student_ans', models.TextField(blank=True, help_text='Student Code', null=True)),
                ('code_response_status', models.JSONField(blank=True, default=dict, null=True)),
                ('code_response', models.TextField(blank=True, help_text='Response from sphere-engine', null=True)),
                ('submissions_id', models.CharField(blank=True, help_text='submissions ID from sphere-engine', max_length=255, null=True)),
                ('button_clicked', models.CharField(blank=True, choices=[('Run', 'Run'), ('Submit', 'Submit')], max_length=11, null=True)),
                ('score', models.PositiveBigIntegerField(blank=True, default=0, null=True)),
                ('practic_time', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testsManagement.compilerquestion')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userManagement.student')),
            ],
        ),
        migrations.AddField(
            model_name='compilerquestion',
            name='students',
            field=models.ManyToManyField(through='testsManagement.CompilerQuestionAtempt', to='userManagement.student'),
        ),
        migrations.CreateModel(
            name='CompilerQuestionLoadTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('load_template', models.TextField()),
                ('compiler', models.CharField(blank=True, choices=[('ADA 95||7', 'ADA 95, ID : 7'), ('Assembler [GCC]||45', 'Assembler [GCC], ID : 45'), ('Assembler [NASM 64bit]||42', 'Assembler [NASM 64bit], ID : 42'), ('Assembler [NASM]||13', 'Assembler [NASM], ID : 13'), ('AWK [GAWK]||104', 'AWK [GAWK], ID : 104'), ('AWK [MAWK]||105', 'AWK [MAWK], ID : 105'), ('Bash||28', 'Bash, ID : 28'), ('BC||110', 'BC, ID : 110'), ('Brainf**k||12', 'Brainf**k, ID : 12'), ('C||11', 'C, ID : 11'), ('C#||86', 'C#, ID : 86'), ('C# [Mono]||27', 'C# [Mono], ID : 27'), ('C++ [GCC]||1', 'C++ [GCC], ID : 1'), ('C++ 4.3.2||41', 'C++ 4.3.2, ID : 41'), ('C++14 [GCC]||44', 'C++14 [GCC], ID : 44'), ('C99 strict||34', 'C99 strict, ID : 34'), ('Clips||14', 'Clips, ID : 14'), ('Clojure||111', 'Clojure, ID : 111'), ('Cobol||118', 'Cobol, ID : 118'), ('Common Lisp||31', 'Common Lisp, ID : 31'), ('Common Lisp [CLISP]||32', 'Common Lisp [CLISP], ID : 32'), ('D [DMD]||102', 'D [DMD], ID : 102'), ('D [GDC]||20', 'D [GDC], ID : 20'), ('Dart||48', 'Dart, ID : 48'), ('Elixir||96', 'Elixir, ID : 96'), ('Erlang||36', 'Erlang, ID : 36'), ('F\\#||124', 'F\\#, ID : 124'), ('Forth||107', 'Forth, ID : 107'), ('Fortran 95||5', 'Fortran 95, ID : 5'), ('Go||114', 'Go, ID : 114'), ('Gosu||98', 'Gosu, ID : 98'), ('Groovy||121', 'Groovy, ID : 121'), ('Haskell||21', 'Haskell, ID : 21'), ('Icon||16', 'Icon, ID : 16'), ('Intercal||9', 'Intercal, ID : 9'), ('Java||10', 'Java, ID : 10'), ('Java - legacy||55', 'Java - legacy, ID : 55'), ('JavaScript [Rhino]||35', 'JavaScript [Rhino], ID : 35'), ('JavaScript [SpiderMonkey]||112', 'JavaScript [SpiderMonkey], ID : 112'), ('Julia||80', 'Julia, ID : 80'), ('Kotlin||47', 'Kotlin, ID : 47'), ('Lua||26', 'Lua, ID : 26'), ('Nemerle||30', 'Nemerle, ID : 30'), ('Nice||25', 'Nice, ID : 25'), ('Node.js||56', 'Node.js, ID : 56'), ('ObjC||43', 'ObjC, ID : 43'), ('Ocaml||8', 'Ocaml, ID : 8'), ('Octave||127', 'Octave, ID : 127'), ('Pascal [FPC]||22', 'Pascal [FPC], ID : 22'), ('Pascal [GPC]||2', 'Pascal [GPC], ID : 2'), ('Perl||3', 'Perl, ID : 3'), ('Perl||54', 'Perl, ID : 54'), ('PHP||29', 'PHP, ID : 29'), ('Pike||19', 'Pike, ID : 19'), ('Prolog [GNU]||108', 'Prolog [GNU], ID : 108'), ('Prolog [SWI]||15', 'Prolog [SWI], ID : 15'), ('Python 2.x||4', 'Python 2.x, ID : 4'), ('Python 2.x [Pypy]||99', 'Python 2.x [Pypy], ID : 99'), ('Python 3 ML/AI||119', 'Python 3 ML/AI, ID : 119'), ('Python 3 nbc||126', 'Python 3 nbc, ID : 126'), ('Python 3.x||116', 'Python 3.x, ID : 116'), ('R||117', 'R, ID : 117'), ('Racket||95', 'Racket, ID : 95'), ('Ruby||17', 'Ruby, ID : 17'), ('Rust||93', 'Rust, ID : 93'), ('Scala||39', 'Scala, ID : 39'), ('Scheme||18', 'Scheme, ID : 18'), ('Scheme [Chicken]||97', 'Scheme [Chicken], ID : 97'), ('Scheme [Guile]||33', 'Scheme [Guile], ID : 33'), ('Sed||46', 'Sed, ID : 46'), ('Smalltalk||23', 'Smalltalk, ID : 23'), ('SQLite - queries||52', 'SQLite - queries, ID : 52'), ('SQLite - schema||40', 'SQLite - schema, ID : 40'), ('Swift||85', 'Swift, ID : 85'), ('Tcl||38', 'Tcl, ID : 38'), ('Text||62', 'Text, ID : 62'), ('TypeScript||57', 'TypeScript, ID : 57'), ('VB||88', 'VB, ID : 88'), ('VB.NET||50', 'VB.NET, ID : 50'), ('Whitespace||6', 'Whitespace, ID : 6')], max_length=255, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courseManagement.course')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='testsManagement.compilerquestion')),
            ],
        ),
        migrations.AddField(
            model_name='compilerquestionatempt',
            name='load_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='testsManagement.compilerquestionloadtemplate'),
        ),
        migrations.CreateModel(
            name='CourseSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week', models.CharField(choices=[('1', 'Week 1'), ('2', 'Week 2'), ('3', 'Week 3'), ('4', 'Week 4'), ('5', 'Week 5'), ('6', 'Week 6'), ('7', 'Week 7'), ('8', 'Week 8')], max_length=1)),
                ('submission_topic', models.CharField(max_length=1000)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissioncourse', to='courseManagement.course')),
            ],
        ),
        migrations.CreateModel(
            name='MessageDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_mock_unlock_week', models.CharField(blank=True, choices=[('1', 'Week 1'), ('2', 'Week 2'), ('3', 'Week 3'), ('4', 'Week 4'), ('5', 'Week 5'), ('6', 'Week 6'), ('7', 'Week 7'), ('8', 'Week 8')], max_length=1, null=True)),
                ('mock', models.BooleanField(default=False)),
                ('current_quiz_unlock_week', models.CharField(blank=True, choices=[('1', 'Week 1'), ('2', 'Week 2'), ('3', 'Week 3'), ('4', 'Week 4'), ('5', 'Week 5'), ('6', 'Week 6'), ('7', 'Week 7'), ('8', 'Week 8')], max_length=1, null=True)),
                ('quiz', models.BooleanField(default=False)),
                ('current_practice_unlock_week', models.CharField(blank=True, choices=[('1', 'Week 1'), ('2', 'Week 2'), ('3', 'Week 3'), ('4', 'Week 4'), ('5', 'Week 5'), ('6', 'Week 6'), ('7', 'Week 7'), ('8', 'Week 8')], max_length=1, null=True)),
                ('practice', models.BooleanField(default=False)),
                ('title', models.CharField(default='null', max_length=1000)),
                ('content', models.TextField(default='null')),
                ('message_created', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courseManagement.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userManagement.student')),
            ],
        ),
        migrations.CreateModel(
            name='MockResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt', models.IntegerField()),
                ('score', models.IntegerField()),
                ('correct', models.BooleanField(default=False)),
                ('week', models.IntegerField()),
                ('Course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Course_mock_result', to='courseManagement.course')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='com_que', to='testsManagement.compilerquestion')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stu_for_result_mock', to='userManagement.student')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionTimer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_field', models.CharField(blank=True, choices=[('Quiz', 'Quiz'), ('Mock', 'Mock')], max_length=20, null=True)),
                ('time', models.TimeField()),
                ('max_num_of_attempts', models.PositiveBigIntegerField(blank=True, null=True)),
                ('week_pass_percent', models.PositiveBigIntegerField(blank=True, null=True)),
                ('week', models.CharField(blank=True, choices=[('1', 'Week 1'), ('2', 'Week 2'), ('3', 'Week 3'), ('4', 'Week 4'), ('5', 'Week 5'), ('6', 'Week 6'), ('7', 'Week 7'), ('8', 'Week 8')], max_length=1, null=True)),
                ('no_of_questions', models.PositiveBigIntegerField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courseManagement.course')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('week', models.CharField(choices=[('1', 'Week 1'), ('2', 'Week 2'), ('3', 'Week 3'), ('4', 'Week 4'), ('5', 'Week 5'), ('6', 'Week 6'), ('7', 'Week 7'), ('8', 'Week 8')], max_length=1)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courseManagement.course')),
            ],
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed', models.BooleanField(default=False)),
                ('score', models.CharField(blank=True, max_length=3, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('answers', models.JSONField(blank=True, default=None, null=True)),
                ('attempts', models.PositiveSmallIntegerField(default=1)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testsManagement.quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userManagement.student')),
            ],
        ),
        migrations.AddField(
            model_name='quiz',
            name='students',
            field=models.ManyToManyField(through='testsManagement.QuizAttempt', to='userManagement.student'),
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answers', models.JSONField()),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testsManagement.quiz')),
            ],
        ),
        migrations.AddField(
            model_name='quizattempt',
            name='questions',
            field=models.ManyToManyField(to='testsManagement.quizquestion'),
        ),
        migrations.CreateModel(
            name='SavePracticeCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_text', models.TextField()),
                ('autosave_time', models.DateTimeField(auto_now=True)),
                ('compliler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='testsManagement.compilerquestionloadtemplate')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testsManagement.compilerquestion')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userManagement.student')),
            ],
        ),
        migrations.CreateModel(
            name='TaskSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='Task-submission')),
                ('week', models.CharField(choices=[('1', 'Week 1'), ('2', 'Week 2'), ('3', 'Week 3'), ('4', 'Week 4'), ('5', 'Week 5'), ('6', 'Week 6'), ('7', 'Week 7'), ('8', 'Week 8')], max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courseManagement.batch')),
                ('course_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='testsManagement.coursesubmission')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userManagement.student')),
            ],
        ),
    ]
